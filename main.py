import asyncio
import logging
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from aiogram.utils.markdown import hbold
import sys
from button import *
from state import *
from aiogram.fsm.context import FSMContext
from get_data import *
from aiogram.utils.keyboard import InlineKeyboardBuilder
TOKEN = "Token"
router = Router()

form_router = Router()
bot = Bot(TOKEN, parse_mode=ParseMode.HTML)

@form_router.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    text = """üè°‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —É–º–Ω—ã–π –¥–æ–º–∞—à–Ω–∏–π –±–æ—Ç! ü§ñ

‚ñ´Ô∏è –ï—Å–ª–∏ –≤—ã –∫–ª–∏–µ–Ω—Ç –∏ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö, –≤–≤–µ–¥–∏—Ç–µ "/service"
‚ñ´Ô∏è –ï—Å–ª–∏ –≤—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É, –≤–≤–µ–¥–∏—Ç–µ "/register"

–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –∏ –º—ã –Ω–∞—á–Ω–µ–º! üöÄ"""
    await message.answer(text)
@form_router.message(Command('rules'))
async def command_rules(message: Message):
    text = """
1. –î–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É—Å–ª—É–≥–∏:
1.1. –í—Å–µ —É—Å–ª–æ–≤–∏—è –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º—ã—Ö —É—Å–ª—É–≥ —Å–æ–≥–ª–∞—Å–æ–≤—ã–≤–∞—é—Ç—Å—è –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–æ–º –∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º) –±–æ—Ç–∞.

2. –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:
2.1. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞ –Ω–µ –Ω–µ—Å–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ, –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π –¥–æ–≥–æ–≤–æ—Ä–∞ –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–æ–º –∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º.

3. –û–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ —Å—Ç–æ—Ä–æ–Ω:
3.1. –ö–ª–∏–µ–Ω—Ç –∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –Ω–µ—Å—É—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ —Å–æ–±–ª—é–¥–µ–Ω–∏–µ –≤—Å–µ—Ö —É—Å–ª–æ–≤–∏–π, –æ–≥–æ–≤–æ—Ä–µ–Ω–Ω—ã—Ö –≤ –¥–æ–≥–æ–≤–æ—Ä–µ –º–µ–∂–¥—É –Ω–∏–º–∏.

4. –†–µ—à–µ–Ω–∏–µ —Å–ø–æ—Ä–æ–≤:
4.1. –õ—é–±—ã–µ —Å–ø–æ—Ä—ã –∏–ª–∏ –Ω–µ–¥–æ—Ä–∞–∑—É–º–µ–Ω–∏—è –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–æ–º –∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º —Ä–µ—à–∞—é—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –º–µ–∂–¥—É –Ω–∏–º–∏, –±–µ–∑ —É—á–∞—Å—Ç–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞.

5. –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:
5.1. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞ –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–µ—Ç–∞–ª—è–º –¥–æ–≥–æ–≤–æ—Ä–∞ –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–æ–º –∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º –∏ –Ω–µ —Ä–∞–∑–≥–ª–∞—à–∞–µ—Ç –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
\n
–£—Å–ª—É–≥–∏: /service
    """

    await message.answer(text)

@form_router.message(Command('offers'))
async def command_offer(message: Message, state: FSMContext):
    first_name = message.from_user.first_name
    text = f"""
üöÄ –î–∞–π—Ç–µ —Å–≤–æ–∏ –ò–¥–µ–∏!

–ü—Ä–∏–≤–µ—Ç, {first_name}!

–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏ —Å–≤–æ–π –≤–∫–ª–∞–¥! –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –∏–¥–µ–∏ –∏–ª–∏ –∫–∞–∫–∏–µ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –Ω–∞–º. –ú—ã —Ü–µ–Ω–∏–º –≤–∞—à –≤–∫–ª–∞–¥ –∏ —Å—Ç—Ä–µ–º–∏–º—Å—è —Å–¥–µ–ª–∞—Ç—å –Ω–∞—à –±–æ—Ç –µ—â–µ –ª—É—á—à–µ!

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ –∏–¥–µ–∏ –≤ —á–∞—Ç, –∏ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –∏—Ö. –í–º–µ—Å—Ç–µ –º—ã –¥–µ–ª–∞–µ–º –Ω–∞—à –±–æ—Ç –ª—É—á—à–µ –¥–ª—è –≤—Å–µ—Ö!

–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —É—á–∞—Å—Ç–∏–µ,

Fixifyüåü

    """
    await state.set_state(OfferState.text)
    await message.answer(text)

@form_router.message(OfferState.text)
async def get_offer_text(message: Message, state: FSMContext):
    await state.update_data(text=message.text)
    await state.clear()
    send_offer_text(message.text)
    text = f"""
–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à—É –ò–¥–µ—é, {message.from_user.first_name}!

–ú—ã –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –≤–Ω–µ–¥—Ä–∏—Ç—å –µ–≥–æ, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –Ω–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ–ª–µ–µ –ø–æ–ª–µ–∑–Ω—ã–º –∏ —É–¥–æ–±–Ω—ã–º –¥–ª—è –≤—Å–µ—Ö.

–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –≤–∞—à–µ –∞–∫—Ç–∏–≤–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ,

Fixifyüåü
\n
–£—Å–ª—É–≥–∏: /service
"""
    await message.answer(text)
@form_router.message(F.text == '/service')
async def komandi(message: Message, state: FSMContext):

    await bot.send_message(chat_id=message.chat.id, text="<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω: </b>", reply_markup=builder.as_markup())
    await state.set_state(ServiceState.region)

@form_router.message(F.text == '/register')
async def registerFunc(message: Message, state: FSMContext):

    await message.answer("<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω: </b>", reply_markup=builder.as_markup())
    await state.set_state(RegisterState.region)


@form_router.callback_query(RegisterState.region)
async def get_regionReg(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(region=callback.data)
    await bot.send_message(callback.from_user.id, text="<b>–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É: </b>", reply_markup=servicebutton.as_markup())
    await state.set_state(RegisterState.service)


@form_router.callback_query(RegisterState.service)
async def get_serviceReg(callback: types.CallbackQuery, state: FSMContext):
    data = await state.update_data(service=callback.data)
   
    await bot.send_message(callback.from_user.id, text="–í–≤–µ–¥–∏—Ç–µ –∏–º—è: ")
    await state.set_state(RegisterState.first_name)

@form_router.message(RegisterState.first_name)
async def get_fname(message: Message,state: FSMContext):

    await state.update_data(first_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—è: ")
    await state.set_state(RegisterState.last_name)


@form_router.message(RegisterState.last_name)
async def get_lname(message: Message,state: FSMContext):

    await state.update_data(last_name=message.text)
    await message.answer("–°–∫–æ–ª—å–∫–æ –ª–µ—Ç –æ–ø—ã—Ç–∞ —É –≤–∞—Å –≤ –¥–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏? ")
    await state.set_state(RegisterState.year_experence)


@form_router.message(RegisterState.year_experence)
async def get_year_experence(message: Message,state: FSMContext):

    await state.update_data(year_experence=message.text)
    await message.answer("–ö–∞–∫–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ —É –≤–∞—Å –µ—Å—Ç—å?")
    await state.set_state(RegisterState.skills)

@form_router.message(RegisterState.skills)
async def get_skills(message: Message,state: FSMContext):

    await state.update_data(skills=message.text)
    await message.answer("–ö–∞–∫–æ–≤ –≤–∞—à –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å?")
    await state.set_state(RegisterState.schedule)

@form_router.message(RegisterState.schedule)
async def get_schedule(message: Message,state: FSMContext):

    await state.update_data(schedule=message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ –∏–ª–∏ –∫–∞–∫ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è —Ü–µ–Ω—ã –Ω–∞ –≤–∞—à–∏ —É—Å–ª—É–≥–∏.")
    await state.set_state(RegisterState.price)


@form_router.message(RegisterState.price)
async def get_price(message: Message,state: FSMContext):

    await state.update_data(price=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª.–Ω–æ–º–µ—Ä: ")
    await state.set_state(RegisterState.phone_number)

@form_router.message(RegisterState.phone_number)
async def get_phone_number(message: Message,state: FSMContext):

    data = await state.update_data(phone_number=message.text)
    data['chat_id'] = message.from_user.id
    createapplicant(data)
    await state.clear()
    text = """üì¨ –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞—à–µ–≥–æ –æ–ø—Ä–æ—Å–∞! –ú—ã —Ü–µ–Ω–∏–º –≤–∞—à –∏–Ω—Ç–µ—Ä–µ—Å –∫ –Ω–∞—à–µ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É.

üîÑ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞, –∏ –º—ã –æ–±—è–∑—É–µ–º—Å—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –µ–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤. –ù–∞—à–∏ —ç–∫—Å–ø–µ—Ä—Ç—ã —Å–≤—è–∂—É—Ç—Å—è —Å –≤–∞–º–∏ –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–º –¥–∞–Ω–Ω—ã–º –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –æ–±—Å—É–∂–¥–µ–Ω–∏—è.

ü§ù –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –≤—ã–±–æ—Ä –Ω–∞—Å, –∏ –º—ã —Å –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –æ–∂–∏–¥–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞!"""
    await bot.send_message(message.from_user.id, text=text)    



@form_router.callback_query(ServiceState.region)
async def get_region(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(region=callback.data)
    await bot.send_message(callback.from_user.id, text="<b>–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É: </b>", reply_markup=servicebutton.as_markup())
    await state.set_state(ServiceState.sname)


@form_router.callback_query(ServiceState.sname)
async def get_service(callback: types.CallbackQuery, state:FSMContext):
    
    if callback.data == "addition":
        text_a = """
üîß –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º, —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç!

–ù–µ –Ω–∞—à–ª–∏ —Å–≤–æ—é –æ–±–ª–∞—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ? –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–∞–º, —á–µ–º –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å. –ú—ã –≥–æ—Ç–æ–≤—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏!

üí¨ –û–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –∏ –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –≤–Ω–µ–¥—Ä–∏—Ç—å –µ—ë –≤ –Ω–∞—à–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ.

–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –≤–∞—à –∏–Ω—Ç–µ—Ä–µ—Å! üöÄ

        """
        await bot.send_message(callback.from_user.id, text=text_a)
        await state.set_state(AddService.text)

    else:
        data = await state.update_data(sname=callback.data)
        applicant_button = InlineKeyboardBuilder()

        if getApplicant(data):
            for i in getApplicant(data):
                answer = i['fedback']/i['quentity']
                if answer:
                    if 1 <= answer < 1.5:
                        applicant_button.add(types.InlineKeyboardButton(text=i['first_name']+" "+"‚≠êÔ∏è", callback_data=str(i['id'])))
                    elif 1.5 <= answer < 2.5:
                        applicant_button.add(types.InlineKeyboardButton(text=i['first_name']+" "+"‚≠êÔ∏è‚≠êÔ∏è", callback_data=str(i['id'])))

                    elif 2.5 <= answer <=3:
                        applicant_button.add(types.InlineKeyboardButton(text=i['first_name']+" "+"‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è", callback_data=str(i['id'])))
                    else:
                        applicant_button.add(types.InlineKeyboardButton(text=i['first_name']+" "+i['last_name'], callback_data=str(i['id'])))
                

                else:
                    applicant_button.add(types.InlineKeyboardButton(text=i['first_name']+" "+i['last_name'], callback_data=str(i['id'])))

            applicant_button.adjust(1)
            await bot.send_message(callback.from_user.id, text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: ", reply_markup=applicant_button.as_markup())
            await state.set_state(ServiceState.applicant)

        else:
            await state.clear()
            await bot.send_message(callback.from_user.id, "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!\n/service")

@form_router.message(AddService.text)
async def get_text_add_service(message: Message, state: FSMContext):
    await state.update_data(text=message.text)
    await state.clear()
    addServicerequest(message.text)
    await message.answer("–°–ø–∞—Å–∏–±–æ –¥–ª—è –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞!\n/service")
@form_router.callback_query(ServiceState.applicant)
async def get_applicant(callback: types.CallbackQuery, state:FSMContext):
    text = getApplicantDetail(callback.data)
    data = await state.update_data(applicant=callback.data)

    await state.set_state(ServiceState.fedback)
    await bot.send_message(callback.from_user.id, text=text)
    await bot.send_message(callback.from_user.id, text="–û—Ü–µ–Ω–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞", reply_markup=fedbackBtn.as_markup())
@form_router.callback_query(ServiceState.fedback)
async def get_fedbackFunc(callback: types.CallbackQuery, state: FSMContext):
    data = await state.update_data(fedback=callback.data)
    fedbackView(data)
    await state.clear()
    await bot.send_message(callback.from_user.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä!\n/service")

async def main() -> None:
    
    dp = Dispatcher()
    dp.include_router(form_router)
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())